# GO Term Parser Utilities

This C++ application provides a suite of command-line tools for analyzing Gene Ontology (`.obo` or `.obo.gz`) files.
It supports operations like listing GO terms, counting obsolete entries, and identifying MetaCyc cross-references.

## Features

- **Task 1:** Print all GO IDs and their names from the `.obo` file.
- **Task 2:** Count and summarize obsolete GO terms.
- **Task 3:** Print GO terms with MetaCyc xrefs, optionally filtered by MetaCyc ID.
- **Supports** `.obo` and `.obo.gz` file formats using zlib.

## Directory Structure
.
├── task1.cpp # Print GO ID and name
├── task2.cpp # Obsolete term statistics
├── task3.cpp # MetaCyc-linked GO term extraction
├── task_utils.cpp # Shared utility functions
├── task_utils.hpp # Header for utilities
├── tests/
│ ├── catch.hpp # Catch2 unit testing header
│ └── test_task_utils.cpp # Unit tests
├── Makefile # Build tasks and test suite
├── argparse/ # argparse header-only CLI parser
└── README.md # You are here


## Build Instructions

Make sure you have:
- C++23 compiler (`g++`, `clang++`, etc.)
- `zlib` installed
- `make` utility

## Build All

make all

## Build Individual Tasks

make task1
make task2
make task3

## Run Tests

make test

## Command-line Usage

task1
# Prints GO IDs and names.

./task1 <file.obo[.gz]>

task2
# Counts total and obsolete terms.

./task2 <file.obo[.gz]>
task3
# Prints GO terms with MetaCyc xrefs, filtered by IDs if given.
./task3 <file.obo[.gz]> [MetaCyc_ID1 MetaCyc_ID2 ...]

## License

MIT License. Free for academic and commercial use.


